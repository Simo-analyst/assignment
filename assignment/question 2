#include <stdio.h>   // Standard I/O operations
#include <stdlib.h>  // Standard library functions
#include <fcntl.h>   // File control options
#include <unistd.h>  // POSIX operating system API

int main() {
    int file_descriptor;  // File descriptor for the file

    // Open a file named "example.txt" in write mode.
    // If the file doesn't exist, it will be created; if it does, its content will be truncated.
    file_descriptor = open("example.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);

    // Check if file opening was successful
    if (file_descriptor == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }

    // Write "Hello World" string to the file
    if (write(file_descriptor, "Hello World\n", 12) == -1) {
        perror("Error writing to file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }

    // Close the file
    if (close(file_descriptor) == -1) {
        perror("Error closing file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }

    // Reopen the file in read mode
    file_descriptor = open("example.txt", O_RDONLY);
    if (file_descriptor == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }

    // Buffer to store the read content
    char buffer[100];
    // Read content from the file into the buffer
    ssize_t bytes_read = read(file_descriptor, buffer, sizeof(buffer));

    // Check if reading was successful
    if (bytes_read == -1) {
        perror("Error reading file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }

    // Print the read content
    printf("Content read from file: %.*s\n", (int)bytes_read, buffer);

    // Close the file
    if (close(file_descriptor) == -1) {
        perror("Error closing file");
        exit(EXIT_FAILURE); // Exit the program with failure status
    }

    return 0; // Exit the program successfully
